#include <iostream>
#include <cstdio>
#include <vector>
#include <algorithm>
#include <iterator>
#include <string>

#include <opencv2/objdetect.hpp>
#include <opencv2/highgui.hpp>
#include <opencv2/imgproc.hpp>
#include <opencv2/dnn/dnn.hpp>
#include <opencv2/features2d.hpp>
#include <opencv2/xfeatures2d.hpp>

using namespace cv;

void get_min_max_x_point(std::vector<Point> &cont_obj , Point &min_x , Point &max_x);
void get_min_max_y_point(std::vector<Point> &cont_obj , Point &min_y , Point &max_y);

int main(int argc , char **argv) {
    Mat typical_piano = imread("most_normal_piano.jpg" , IMREAD_COLOR);
    Ptr<BRISK>brisk = BRISK::create();
    std::vector<KeyPoint>keypoints_template;
    Mat descriptors_template;
    BFMatcher matcher(NORM_HAMMING);
    brisk->detectAndCompute(typical_piano , Mat() , keypoints_template , descriptors_template);

    VideoCapture video(0);
    namedWindow("win1");
    while(1) {
        Mat frame , blurred_frame , grayscaled_frame , binary_frame;
        video.read(frame);
        medianBlur(frame , blurred_frame , 11);
        cvtColor(blurred_frame , grayscaled_frame , COLOR_RGB2GRAY);
        threshold(grayscaled_frame , binary_frame , 100 , 255 , THRESH_OTSU|THRESH_BINARY);

        std::vector<std::vector<Point>>contours;
        findContours(binary_frame , contours , RETR_EXTERNAL , CHAIN_APPROX_SIMPLE);
        
        std::vector<KeyPoint>keypoints_query;
        Mat descriptors_query;
        std::vector<DMatch>matches , good_matches;
        brisk->detectAndCompute(frame , Mat() , keypoints_query , descriptors_query);
        matcher.match(descriptors_query , matches);
        for(DMatch m : matches) {
            if(m.distance >= 100) continue; // filtering the bad matches
            good_matches.push_back(m);
        }
        RNG rng(2987432);
        for(int i = 0; i < contours.size(); i++) {
            Scalar color = Scalar(rng.uniform(0 , 255) , rng.uniform(0 , 255) , rng.uniform(0 , 255));
            drawContours(frame , contours , i , color , 10 , 1);

            std::vector<Point> cont_obj = contours.at(i);

            // calculate minimum and maximum x points from the contour
            Point p_min_x , p_max_x;
            Point p_min_y , p_max_y;
            get_min_max_x_point(cont_obj , p_min_x , p_max_x);
            get_min_max_y_point(cont_obj , p_min_y , p_max_y);
            
            if(p_max_x.x-p_min_x.x < 100) continue; // skip the small contours
            
            int hit = 0;
            for(DMatch m : good_matches) {
                hit += (pointPolygonTest(contours[i] , keypoints_query[m.queryIdx].pt , false) > 0);
            }
            float hit_ratio = (float)hit/(float)good_matches.size();
            
            // establish the box from the min,max points
            rectangle(frame , Rect(Point(p_min_x.x , p_min_y.y) , Point(p_max_x.x , p_max_y.y)) , color , 10);
            Mat cut_image = frame(Rect(Point(p_min_x.x , p_min_y.y) , Point(p_max_x.x , p_max_y.y)));

            putText(frame , std::to_string(hit_ratio) , Point(p_min_x.x+30 , p_min_y.y+120) , FONT_HERSHEY_SIMPLEX , 4 , 0x00 , 10);
        }
        
        Mat img_matches;
        drawMatches(frame , keypoints_query , typical_piano , keypoints_template , good_matches , img_matches);
        imshow("win1" , img_matches);
        if(waitKey(1) == 27) break;
    }

    return 0;
}

void get_min_max_x_point(std::vector<Point> &cont_obj , Point &min_x , Point &max_x) {
    std::vector<Point>::iterator min_x_it = std::min_element(cont_obj.begin() , cont_obj.end() , [](const auto &a , const auto &b) { return (bool)(a.x < b.x); });
    std::vector<Point>::iterator max_x_it = std::max_element(cont_obj.begin() , cont_obj.end() , [](const auto &a , const auto &b) { return (bool)(a.x < b.x); });
    min_x = *min_x_it;
    max_x = *max_x_it;
}

void get_min_max_y_point(std::vector<Point> &cont_obj , Point &min_y , Point &max_y) {
    std::vector<Point>::iterator min_y_it = std::min_element(cont_obj.begin() , cont_obj.end() , [](const auto &a , const auto &b) { return (bool)(a.y < b.y); });
    std::vector<Point>::iterator max_y_it = std::max_element(cont_obj.begin() , cont_obj.end() , [](const auto &a , const auto &b) { return (bool)(a.y < b.y); });
    min_y = *min_y_it;
    max_y = *max_y_it;
}